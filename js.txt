***var/let			定义变量
***var/let variable = 	初始化变量
prompt()		输入
alert()		弹出
console()		输出

infinity 		无穷大
NaN			不是数字
isNaN			判断  不是数字true 是数字false
str.length		字符串长度
str + 任意		=str型
'pink' + age + '岁'	可以变量+str 
true=1,false=0		在加法运算时
var variable = undefined未定义数据
variable + 'pink'	variablepink
variable + 2		NaN

null			空值
null + 'pink'		nullpink
null + 1		1

typeof			检测变量数据类型
var num = 10 
console.log(typeof num) number

数据转化
num = 10 成字符串：	num.toString
	  		String(num)
	***隐式转化	num + ""
age="10" 成数字型： 	parseInt(age)得整数
			paeseInt('120px')=120
			parseFloat(age)得浮点数
			Number(age)得数值型
	***隐式转化	num-0=10 或乘除都可
Boolean('10')		true
			空的、否定的为false

++num;num--		递增递减运算符		
			前置先增减后返回值
			后置先返回原值再增减

eg: e = 10
    e++ + ++e  	=22

==			默认转化数据类型
===			全等：值与数据类型
&&			和
||			或
！			非 

短路原理：如果左边可以确定结果（而不是布尔值），则不再考虑后面运算
123  &&  456		逻辑与 短路运算    （返回假）
表达式1&&表达式2	若表达式1为真    返回表达式2
			若表达式1为假    返回表达式1
123 || 456      	逻辑或 短路运算    （返回真）
表达式1&&表达式2	若表达式1为真    返回表达式1	
			若表达式1为假    返回表达式2
eg：0 || 4 || 4 + 1	第一次，表达式1为0，表达式2为4 || 4 + 1

优先级
（）> ++ ! > * + > >< > == != > && > || > = > ,

if (条件语句) {执行语句}

三元表达式：
	条件？表达式1：表达式2
	条件真->表达式1结果
	条件假->表达式2结果

switch(变量) {		变量===case 全等匹配		
	case value1:	switch一旦有效将不再匹配，直接执行下面
		语句1；	所有一般写入break结束switch
		break;
	case value1:
		语句2；
		break;
	default:
		语句3；
}

for (初始化变量；条件表达式；操作表达式）{}
	初始化变量=var声明  计数器
	条件表达式=决定是否终止
	操作表达式=循环最后执行，更新计数器
	
一行打印n颗星：
	str = 0;
	for (var i = 1; i <= n; i++) {
	str = str + "星"}

数组array：
	var arr = new Array();  
	var arr = [];
	超标显示undefined

数组扩容：修改length长度；修改索引值,追加数组元素
	1.arr.length = 9;	直接给.length赋值
	2.arr[9] = tmp;   直接修改索引
**数组不像列表存在超标情况，给数组名赋值会把原先全部数据取代

函数function
	形参用于接收实参
	function getSum(形参1，形参2...) {}
	getSum(实参1，实参2...)；
实参>形参：取形参个数；实参<形参：形参undefined->NaN

	return有终止函数的作用
	return只能返回一个结果且是最后一个，但可以数组多包含
	函数没return则返回undefined

***arguments:函数内置对象，储存所有实参。伪数组

函数声明：
	1.命名函数  function 函数名(){}
	2.函数表达式  var/let 变量名 = function(){}  匿名函数
	
作用域：代码名字（变量）在某个范围内起作用和效果，减少命名冲突
 	全局作用域：函数外面  -全局变量
	局部作用域：函数里面  -局部变量
	es6才有块级作用域6
*函数内没有声明直接赋值的变量是全局变量
	全局变量：浏览器关闭时才会销毁，比较占内存
	局部变量：程序执行完毕就会销毁，比较节约内存
作用域链：内部函数访问外部函数的变量采用链式查找（就近原则）

js引擎运行js分两步 1.预解析 2.代码执行
*预解析：先将所有的var和function提升到当前作用域的最前面
	1）变量提升，只提升声明变量，不提升赋值
	2）将函数声明提升至当前作用域最前面，不调用函数
代码执行：从上往下逐行执行
	
*  var a = b = c = 9    是 var a = 9; b = 9; c = 9;

*****对象object：具体的事物，具有单体指向性
	如手机的属性：大小，颜色，重量...
	    手机的方法：打电话，玩游戏，发短信...等匿名函数
js对象：一组无序的 相关‘属性’和‘方法’的集合；属性=n特征、方法=v行为
	如字符串，数组
变量->数组->对象
创建对象：
	1.字面量创建对象{}
	eg：var obj {
			name:"ican-7",
			age: 18,
			sayhi: function(){
					console.log("hi")
					}
		}
(调用属性）    console.log(obj.name);
(调用属性2）  console.log(obj['name'];
(调用方法）      obj.sayhi();

	2.new创建
		var obj = new Object();
	追加：  obj.name = 'ican-7';
		obj.sayhi = function(){};

	3.构造函数创建对象（创建多个对象，除去重复代码）

构造函数：抽象了对象公共部分，封装成某一大类（class）如：明星
创建对象：通过new关键字，添加属性与方法的值实例化构造函数 如：周星驰

		function 构造函数名（形参）{
			this.属性 = 值，
			this.方法 = function(){}
		}
(调用构造函数)var 变量 = new 构造函数名（实参）   返回对象本身 

new的作用：
	1.内存中存在空的对象
	2.this指向空对象
	3.执行构造函数里的代码，给空对象添加属性和方法
	4.返回该对象

遍历对象：
	for ( var k in obj） {  		k=属性名（key）
		concole.log(obj[k]);	k不加引号
}






*****内置对象
	1.Math	非构造函数
		Math.PI
		Math.max()
		Math.min()
		Math.abs()
		Math.fllor()向下取整
		Math.ceil()向上取整
		Math.round()四舍五入
		Math.random() [0,1)随机数
	***	构造随机取整函数：function getRandom(min,max) {
					return Math.floor(Math.random() * 
					(max - min + 1)) + min;
					}
	
	2.Date	构造函数，用new创造对象
		var date = new Date();
		不跟参数返回当前计算机时间
		参数常用写法，数字型： 2022， 12， 31
			***	字符串型： ‘2022-12-31 1:41:14'

		特殊： date.getMonth() 0-11  返回比实际月份小1
		      date.getDay() 0-6  周日返回0
		.getFullYear()当年
		.getMonth()当月
		.getDate()当天
		.getDay()星期
		.getHours()当前小时
		.getMinutes()当前分钟
		.getSeconds()当前秒钟
	
		获得距离1970.1.1多少秒时间:时间戳（单位：毫秒）
			1.valurOf()
			2.getTime()
		**	3.var date1 = +new Date();
		***	4.(H5) Date.now()

		时间戳与时间转化：
			时间->时间戳：+new Date(time);
			时间戳->时间：d = parseInt(总秒/ 60/ 60/ 24);
					h = parseInt(总秒/ 60 /60 %24);
					m = parseInt(总秒/ 60 %60);
					s = parseInt(总秒%60);
				
	3.Array
		new Array(2)  表示创建长度为2的空数组
		new Array(2,3)=[2,3]
		运算符检测是否为数组instanceof
			:1.arr instanceof Array;
			:2.Array.isArray(arr);

		push添加数组：arr.push(4,'pink')	末尾添加
				参数直接写要加入的元素（可多个）
				本身返回值为新数组长度
		unshift添加：arr.unshift(5,'pink')	开头添加
				本身·返回值为新数组长度
		pop删除    ：arr.pop()			末尾删除
				只能删除一个
				本身返回值为删除的那个元素
		shift删除    ：arr.shift()			开头删除
				只能删除一个
				本身返回值为删除的那个元素

		arr.reverse() 翻转数组
		arr.sort()  按首字母大小排序
		arr.sort( function(a,b){return a-b })  升序
		arr.sort( function(a,b){return b-a })  降序
		filter:过滤元素
			var arr = [1,2,3,4]
			var newArr = arr.filter(items => {
						return items % 2 ===0
					})
			newArr  == [2,4]

		.indexOf(’元素‘[,可选起始位置])  返回第一个存在元素索引号  没有则返回-1

		.lastIndexOf('元素')返回最后一个存在元素的索引号，没有则返回-1
	
**		字符串变数组：var arr =str.split(",")
		数组变字符串：1.toString()    arr.toString();
				2.join(分隔符) arr.join('-');

	4.String    ->包装
**			->具有不可变性，
			  若修改字符串变量，保留于原空间，将新字符串放在新空间
		.indexOf(’元素‘[,可选起始位置])  返回第一个存在元素索引号  没有则返回-1
		.lastIndexOf('元素')返回最后一个存在元素的索引号，没有则返回-1
		.charAt(index)返回字符  eg:str.charAt(3); 
		.charCodeAt(index)返回ASC码
**h5		.str[index]
		
***		字符串操作方法：
			.contact(str1,str2...)
			.substr(start,length)截取字符，从start开始，取length个
			.slice(start,end)
			.substring(start,end)

		.replace(被替换的，新的替换是)  只会替换第一个  可与循环搭配
		.split()
**		字符串变数组：var arr =str.split("断隔符")
		数组变字符串：1.toString()   	 arr.toString();
				2.join(分隔符)	 arr.join('-');





简单数据类型与复杂数据类型：
	简单：string number boolean undefined null  ->放入栈
	复杂：Object Array Date 等用new创建的对象	 ->放入堆
	     在栈里存放地址，通过地址指向堆
*****
Web APIs--针浏览器的接口:DOM、BOM
	API:Application Programming Interface应用程序编程接口
	
	console.dir()  打印返回的元素对象，查看属性和方法


DOM：document object model
     核心：document
	
	document.getElementById('id')  返回DOM的element对象  为object
	document.getElementsByTagName('div')  返回伪数组形式

**	var ul = document.getElementById('ul');
	console.log(ul.getElementsByTagName('li'));

h5	document.getElementsByClassName('box');	
****	document.querySelector('.box')  返回选择器的第一个元素对象
	document.querySelectorAll('.box')  返回所有元素对象集合

	document.body;  返回body元素对象
	document.documentElement；  返回html对象

事件基础：触发--响应机制
	事件三要素：事件源，事件（触发）类型，事件处理程序
		事件源：var btn = document.getElementById('btn');
		事件类型：点击（onclick），鼠标经过，键盘按下
		事件处理程序：函数赋值
		eg: btn.onclick = function(){
			alert('23年新年快乐！')}
	
**	鼠标事件：
		onclick:左键点击
		onmouseover:鼠标经过触发
		onmouseout:鼠标离开触发
		onfocus:鼠标聚焦触发
		onblur:失去鼠标聚焦触发
		onmousemove:鼠标移动触发		只要鼠标移动1px就会触发
		onmouseup:鼠标弹起触发
		onmousedown:鼠标按下触发

	操作元素
		1.改变元素内容：element.innerText    element.innerHTML
		eg:<botton>点击显示时间<botton/>
		   <div>隐藏状态<div/>
		   var btn = document.querySelector('button');
		   var div = document.querySelector('div');
		   btn.onclick = function() {
				div.innerHTML = Date();
				}
		innerText与innerHTML区别
		.innerText不识别html标签    可读写，去空格和换行
	***	.innerHTML识别html标签	 可读写，保留空格和换行

		2.修改元素属性：.属性 = 新
		eg: zxy.onclick = function() {
			img.src = 'images/zxy.jpg';
			img.title = 'zxy';
			}
		eg: btn.onclick = function() {
			input.value = '被点击了'；
			this.disabled = true;
			}
	this->指向事件函数的调用者

	flag变量算法----按钮调控：
		var flag = 0;
		eye.onclick = function() {
			if (flag == 0) {
				pwd.type = 'text'；
				flag = 1;
			} else {
				pwd.type = 'password';
				flag = 0;
			}
		}

**	修改样式属性.style.驼峰命名法=		适用于修改少
		eg:div.onclock = function() {
			this.style.backgroundColor = 'purple';
			this.style.width = '250px';
			}

*****	精灵图的js语言应用：
		var lis = document.querySelectorAll('li');
		for (var i = 0; i < lis.length; i++) {
			var index = i * 44;
			lis[i].style.backgroundPosition = '0 -' + index + 'px';
		}

**	修改样式属性：.className			适用于修改多
		1.先在css中 规定好一个类  eg:class;
		2.div.onclick = function() {
			this.className = 'class';
			} 				为div添加新属性class
			！会覆盖，可以多类名选择器写入

*****	排他思想算法：双重for循环，点谁谁事，其他正常
			第一for: 留下我自己
			第二for：干掉其他人

*****变量带入：引引加加

全选与反选：
     全选	eg:	j_cbAll.onclick = function() {
			for (var i = 0; i < j_tbs.length; i++) {
				j_tbs[i].checked = this.checked;
			}
		}
   反选eg：	for (var i = 0; i < j_tbs.length; i++) {
			j_tbs[i].onclick = function() {
***控制变量			var flag = true;
				for (var i = 0; i < j_tbs.length; i++) {
					if (!j_tbs[i].checked) {
						flag = false;
						break;
					}
				}
				j_cbAll.checked = flag;
			}
		}

*****		
获取属性值：
	1.element.属性；  				获取内置属性
	2.element.getAttribute('属性')；	可获取自定义属性
设置属性值：
	1.element.属性 = '值'；
	2.element.setAttrubute('属性','值')；
移除属性：
	element.removeAttribute('属性');



h5规定：自定义属性以'data-'开头
h5	新增获取属性：eg:data-index = "20";
			1.element.dataset.index;
			2.element.dataset['index'];
	eg: data-list-name = 'andy';（若多个短线，采用驼峰命名法）
	获得：element.dataset.listName  ->驼峰命名法


节点获取对象：根据父子节点关系，更加便利&&逻辑性强
	元素节点（标签）、属性节点、、文本节点（文字、空格、换行）
nodeType  1  		2		3


*****元素子节点：node.children;
*****父节点：node.parentNode;

     			所有子节点：ndoe.childNodes;包括文本节点等

			(获取第一个子节点：.firstchild;)
			(获取第一个元素节点：.firstElementChild;   有兼容性问题)

获取第一个元素子节点：element.children[0];
最后一个元素子节点：element.children[element.children.length - 1];

				.nextSibling--下一个兄弟节点
				.previousSibling--上一个兄弟节点
				兄弟节点.nextElementSibling
		 		 .previousElementSibling
*****
创建元素节点
	document.createElement('li')

添加节点
	node.appendChild('child');
****	node.insertBefore('child',指定元素[ul.child[0]]);

	eg:  var li = document.createElement('li');	->创建
	     var ul = document.querySelector('ul');	->传入父节点
	     ul.appendChild(li);				->添加至末尾（追加）

删除节点
	node.removeChild(child) 
 eg:
	 ul.removeChild(ul.children[0]);



	
阻止链接跳转： <a href='javascript:;>删除</a>;
新建标签<li>中添加 链接a:
	li.innerHTML = text.value + "<a href='javascript.js':;>删除</a>"

复制节点：
	.cloneNode()	若无参数(false) 浅拷贝，不复制内容，true则并复制内容
	eg:
		var lili = ul.chilfren[0].cloneNode(true);
		ul.appendChild(lili)

动态创建：
	document.write('<div>123</div>')页面重绘，不常用

	1.innerHTML  字符串直接相加效率低；采用数组形式拼接效率更高
	2.createElement  效率高

DOM核心：	创建：innerHTML、createElement
		增:appendChild、insertBefore
		删:removeChild
		改：属性(src)、元素(innerHTML)、表单(value)、样式(style)
		查:querySelector、parentNode
		属性操作：setAttribute、getAttribute、removeAttribute
		事件操作：onclick、onmouseover

事件高级：
	注册事件：
		传统：on开头  		--具有唯一性
		监听：addEventListener(type,listener[,useCapture])
			字符串型事件	    ‘click’,function()[,false]

	删除事件
		传统
		监听：.removeEventListener(type,listener[,useCapture])
		需要封装fn，不能用用匿名函数	  'click',fn




*****		每个alert只执行一次且隔开执行
document.addEventListener('click', fn,false);
        
        function fn() {
            alert('我这么喜欢你你还要点我！！！');
            document.removeEventListener('click', fn, false);
            document.addEventListener('click', wfn, false);   
        }

function wfn() {
            alert('我要吃了你！！！');
            document.removeEventListener('click', wfn, false);
            document.addEventListener('click', bfn, false);
        }




DOM事件流：捕获事件阶段->目标阶段->*****冒泡阶段
	js只能执行一种阶段
捕获：	.addEventListener('click',function(){},true);
冒泡：	.addEventListener('click',function(){},false);  或空

事件对象：处于监听函数的形参位置，只有事件才会存在
	    包含事件的一系列相关数据的集合：鼠标事件，键盘事件等
	自己命名，e,event...;系统自动创建
**	e.target返回触发事件的对象  ！=  this:返回绑定事件对象  ul与li
	e.type返回事件类型
	e.preventDefault()阻止默认行为：链接不跳转、提交按钮不提交

*****阻止冒泡：e.stopPropagation();

事件委托（代理、委派）：快递员->班主任->学生    班主任就是代理，委派
*****	原理：不给每个子节点单独设立事件监听器，而是将监听器放在父节点上，
	     利用"冒泡原理"影响设置每个子节点
	可与事件对象e.target搭配使用

鼠标操作：
	1.contextmenu  禁止鼠标右键菜单
		document.addEventListener('contextmenu',function(e) {
		e.preventDefault();
		}
	2.selectstart  禁止选中
		document.addEventListener('selectstart',function(e)) {
		e.preventDefault();
		}

鼠标事件对象：
	相对于可视窗口
		e.clientX;返回x坐标    
		e.clientY;返回y坐标
***	相对于整个页面
		e.pageX;返回x坐标
		e.pageY;返回y坐标
	
键盘事件
**	onkeyup  弹起时触发，不区分大小写
	onkeydown按下时触发，可连续触发，可识别任意键，不区分大小写
	onkeypress按下时触发，区别不能识别功能键ctrl、shift等，区分大小写
	up与press先触发后输入	
	事件顺序：down>press>up

键盘事件对象
	e.keyCode 返回 ASCII码
	search.focus();聚焦方法；

BOM：Browser Object Model 浏览器对象模型；
     浏览器窗口交互，核心是window，它是全局对象，浏览器顶级对象
	
	全局的变量和函数都是window的属性和方法

传统	window.onload = function() {}
	页面结束时加载方法，但只会执行最后一个onload
新	window.addEventListener('load',function() {} )
	可以写多个load

window常见事件：
	onload  全部加载
	DOMContentLoaded    除去图片、css、flash等的onload
	onresize    窗口大小变化
	innerWidth  窗口宽度
	innerHeight 窗口高度
*****	定时器：  	setTimeout(fn[,延时毫秒数]）--只执行一次
		      setInterval(fn[,延时毫秒数]）--反复执行回调函数

		常用标识符区别  var timer1 = setTimeout(fn,3000);
		fn称为回调函数
		
	清除定时器	clearTimeout(定时器标识符)
			eg:	var btn = document.quetySelector('button');
				var timer = setTimeout(function() {
						console.log('爆炸了');
					},5000);
				btn.addEventListener('click'，function() {
					clearTimeout(timer);
					})
	停止定时器	clearInterval(定时器标识符)

this指向-调用者    定时器的调用者是window
构造函数中this指向函数实例
	eg: function Fun() {
		console.log(this);
		}
		var fun = new Fun();

js执行机制
	1.（h5 Web Worker前）单线程
	2.同步与异步：
		同步任务						主线程同步任务
		异步任务：事件(回调函数)，加载，定时器		任务队列
执行机制： 同步任务->异步进程处理->任务队列=>(事件循环）主线程



location对象  (window事件)
URL：Uniform Resource Locator 统一资源定位符
protocol://host[:port]/path/[?query]#fragment

eg:http://www.itcase.cn/index.html?name=andy&age=18#link

protocol:http    通信协议http,ftp,maito
host：www.itcase.cn    主机（域名）
port:80    端号口
path: /index.html    主机上文件地址
query: name=andy&age=18    ？后面 参数 键值对形式，&隔开
fragment：link    #后的内容  见于链接锚点

location对象属性
	.href			获取或设置整个URL
	.host			返回主机（域名）
	.port			返回端口号  未写则返回字符串
	.pathname		返回路径
	.search		返回参数	！数据传输效果
	.hash			返回片段

页面跳转：
	var btn = document.querySelectoe('button');
	btn.addEventSelector('click',function(){
		location.href = 'www.bilibili.com';
	})
获得参数：
	location.search.substr(1).split();

location对象的方法
	.assign('地址')	实现跳转，记录历史能后退
	.replace('地址')	实现跳转，不能记录历史
	.reload()		刷新页面，参数为true时->前置刷新

navigator对象
	userAgent

history对象
	.forward()    前进
	.back()	后退
	.go(参数)	参数-1，1，2...
